{
    "Node_Properties": {
        "description": "Returns configuration settings of nodes. Lists global settings of devices in the network. Settings that are specific to interfaces, routing protocols, etc. are available via other questions.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include nodes matching this name or regex.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "properties",
                "description": "Include properties matching this regex.",
                "type": "NodePropertySpec",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.nodeProperties().answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node"
            },
            {
                "name": "AS_Path_Access_Lists",
                "description": "Names of AS path access lists"
            },
            {
                "name": "Authentication_Key_Chains",
                "description": "Names of authentication keychains"
            },
            {
                "name": "Community_Match_Exprs",
                "description": "Names of expressions for matching a community"
            },
            {
                "name": "Community_Set_Exprs",
                "description": "Names of expressions representing a community-set"
            },
            {
                "name": "Community_Set_Match_Exprs",
                "description": "Names of expressions for matching a community-set"
            },
            {
                "name": "Community_Sets",
                "description": "Names of community-sets"
            },
            {
                "name": "Configuration_Format",
                "description": "Configuration format of the node"
            },
            {
                "name": "DNS_Servers",
                "description": "Configured DNS servers"
            },
            {
                "name": "DNS_Source_Interface",
                "description": "Source interface to use for communicating with DNS servers"
            },
            {
                "name": "Default_Cross_Zone_Action",
                "description": "Default action (PERMIT, DENY) for traffic that traverses firewall zones (null for non-firewall nodes)"
            },
            {
                "name": "Default_Inbound_Action",
                "description": "Default action (PERMIT, DENY) for traffic destined for this node"
            },
            {
                "name": "Domain_Name",
                "description": "Domain name of the node"
            },
            {
                "name": "Hostname",
                "description": "Hostname of the node"
            },
            {
                "name": "IKE_Phase1_Keys",
                "description": "Names of IKE Phase 1 keys"
            },
            {
                "name": "IKE_Phase1_Policies",
                "description": "Names of IKE Phase 1 policies"
            },
            {
                "name": "IKE_Phase1_Proposals",
                "description": "Names of IKE Phase 1 proposals"
            },
            {
                "name": "IP6_Access_Lists",
                "description": "(Deprecated) Names of IPv6 filters (ACLs, firewall rule sets)"
            },
            {
                "name": "IP_Access_Lists",
                "description": "Names of IPv4 filters (ACLs, firewall rule sets)"
            },
            {
                "name": "IPsec_Peer_Configs",
                "description": "Names of IPSec peers"
            },
            {
                "name": "IPsec_Phase2_Policies",
                "description": "Names of IPSec Phase 2 policies"
            },
            {
                "name": "IPsec_Phase2_Proposals",
                "description": "Names of IPSec Phase 2 proposals"
            },
            {
                "name": "Interfaces",
                "description": "Names of interfaces"
            },
            {
                "name": "Logging_Servers",
                "description": "Configured logging servers"
            },
            {
                "name": "Logging_Source_Interface",
                "description": "Source interface for communicating with logging servers"
            },
            {
                "name": "NTP_Servers",
                "description": "Configured NTP servers"
            },
            {
                "name": "NTP_Source_Interface",
                "description": "Source interface for communicating with NTP servers"
            },
            {
                "name": "PBR_Policies",
                "description": "Names of policy-based routing (PBR) policies"
            },
            {
                "name": "Route6_Filter_Lists",
                "description": "(Deprecated) Names of structures that filter IPv6 routes (e.g., prefix lists)"
            },
            {
                "name": "Route_Filter_Lists",
                "description": "Names of structures that filter IPv4 routes (e.g., prefix lists)"
            },
            {
                "name": "Routing_Policies",
                "description": "Names of policies that manipulate routes (e.g., route maps)"
            },
            {
                "name": "SNMP_Source_Interface",
                "description": "Source interface to use for communicating with SNMP servers"
            },
            {
                "name": "SNMP_Trap_Servers",
                "description": "Configured SNMP trap servers"
            },
            {
                "name": "TACACS_Servers",
                "description": "Configured TACACS servers"
            },
            {
                "name": "TACACS_Source_Interface",
                "description": "Source interface to use for communicating with TACACS servers"
            },
            {
                "name": "VRFs",
                "description": "Names of VRFs present on the node"
            },
            {
                "name": "Zones",
                "description": "Names of firewall zones on the node"
            }
        ]
    },
    "Interface_Properties": {
        "description": "Returns configuration settings of interfaces. Lists interface-level settings of interfaces. Settings for routing protocols, VRFs, and zones etc. that are attached to interfaces are available via other questions.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "interfaces",
                "description": "Include interfaces matching this specifier.",
                "type": "InterfaceSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "properties",
                "description": "Include properties matching this specifier. Must be a string (not a list).",
                "type": "InterfacePropertySpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "excludeShutInterfaces",
                "description": "Exclude interfaces that are shutdown.",
                "type": "bool",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.interfaceProperties().answer().frame()",
        "return_value": [
            {
                "name": "Interface",
                "description": "Interface"
            },
            {
                "name": "Access_VLAN",
                "description": "VLAN number when the switchport mode is access (null otherwise)"
            },
            {
                "name": "Active",
                "description": "Whether the interface is active"
            },
            {
                "name": "Admin_Up",
                "description": "Whether the interface is administratively enabled"
            },
            {
                "name": "All_Prefixes",
                "description": "All IPv4 addresses assigned to the interface"
            },
            {
                "name": "Allowed_VLANs",
                "description": "Allowed VLAN numbers when the switchport mode is trunk"
            },
            {
                "name": "Auto_State_VLAN",
                "description": "For VLAN interfaces, whether the operational status depends on member switchports"
            },
            {
                "name": "Bandwidth",
                "description": "Nominal bandwidth in bits/sec, used for protocol cost calculations"
            },
            {
                "name": "Blacklisted",
                "description": "Whether the interface is considered down for maintenance"
            },
            {
                "name": "Channel_Group",
                "description": "Name of the aggregated interface (e.g., a port channel) to which this interface belongs"
            },
            {
                "name": "Channel_Group_Members",
                "description": "For aggregated interfaces (e.g., a port channel), names of constituent interfaces"
            },
            {
                "name": "DHCP_Relay_Addresses",
                "description": "IPv4 addresses to which incoming DHCP requests are relayed"
            },
            {
                "name": "Declared_Names",
                "description": "Any aliases explicitly defined for this interface"
            },
            {
                "name": "Description",
                "description": "Configured interface description"
            },
            {
                "name": "Encapsulation_VLAN",
                "description": "Number for VLAN encapsulation"
            },
            {
                "name": "HSRP_Groups",
                "description": "HSRP group identifiers"
            },
            {
                "name": "HSRP_Version",
                "description": "HSRP version that will be used"
            },
            {
                "name": "Inactive_Reason",
                "description": "Reason why interface is inactive"
            },
            {
                "name": "Incoming_Filter_Name",
                "description": "Name of the input IPv4 filter"
            },
            {
                "name": "MLAG_ID",
                "description": "MLAG identifier of the interface"
            },
            {
                "name": "MTU",
                "description": "Layer3 MTU of the interface"
            },
            {
                "name": "Native_VLAN",
                "description": "Native VLAN when switchport mode is trunk"
            },
            {
                "name": "Outgoing_Filter_Name",
                "description": "Name of the output IPv4 filter"
            },
            {
                "name": "PBR_Policy_Name",
                "description": "Name of policy-based routing (PBR) policy"
            },
            {
                "name": "Primary_Address",
                "description": "Primary IPv4 address along with the prefix length"
            },
            {
                "name": "Primary_Network",
                "description": "Primary IPv4 subnet, in canonical form"
            },
            {
                "name": "Proxy_ARP",
                "description": "Whether proxy ARP is enabled"
            },
            {
                "name": "Rip_Enabled",
                "description": "Whether RIP is enabled"
            },
            {
                "name": "Rip_Passive",
                "description": "Whether interface is in RIP passive mode"
            },
            {
                "name": "Spanning_Tree_Portfast",
                "description": "Whether spanning-tree portfast feature is enabled"
            },
            {
                "name": "Speed",
                "description": "Link speed in bits/sec"
            },
            {
                "name": "Switchport",
                "description": "Whether the interface is configured as switchport"
            },
            {
                "name": "Switchport_Mode",
                "description": "Switchport mode (ACCESS, DOT1Q_TUNNEL, DYNAMIC_AUTO, DYNAMIC_DESIRABLE, FEX_FABRIC, MONITOR, NONE, TAP, TOOL, TRUNK) for switchport interfaces"
            },
            {
                "name": "Switchport_Trunk_Encapsulation",
                "description": "Encapsulation type (DOT1Q, ISL, NEGOTIATE) for switchport trunk interfaces"
            },
            {
                "name": "VRF",
                "description": "Name of the VRF to which the interface belongs"
            },
            {
                "name": "VRRP_Groups",
                "description": "All VRRP groups to which the interface belongs"
            },
            {
                "name": "Zone_Name",
                "description": "Name of the firewall zone to which the interface belongs"
            }
        ]
    },
    "BGP_Process_Configuration": {
        "description": "Returns configuration settings of BGP processes. Reports configuration settings for each BGP process on each node and VRF in the network. This question reports only process-wide settings. Peer-specific settings are reported by the bgpPeerConfiguration question.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include nodes matching this name or regex.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "properties",
                "description": "Include properties matching this regex.",
                "type": "BgpProcessPropertySpec",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.bgpProcessConfiguration().answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node"
            },
            {
                "name": "VRF",
                "description": "VRF"
            },
            {
                "name": "Router_ID",
                "description": "Router ID"
            },
            {
                "name": "Confederation_ID",
                "description": "Externally visible autonomous system number for the confederation"
            },
            {
                "name": "Confederation_Members",
                "description": "Set of autonomous system numbers visible only within this BGP confederation"
            },
            {
                "name": "Multipath_EBGP",
                "description": "Whether multipath routing is enabled for EBGP"
            },
            {
                "name": "Multipath_IBGP",
                "description": "Whether multipath routing is enabled for IBGP"
            },
            {
                "name": "Multipath_Match_Mode",
                "description": "Which AS paths are considered equivalent (EXACT_PATH, FIRST_AS, PATH_LENGTH) when multipath BGP is enabled"
            },
            {
                "name": "Neighbors",
                "description": "All peers configured on this process, identified by peer address (for active and dynamic peers) or peer interface (for BGP unnumbered peers)"
            },
            {
                "name": "Route_Reflector",
                "description": "Whether any BGP peer in this process is configured as a route reflector client, for ipv4 unicast address family"
            },
            {
                "name": "Tie_Breaker",
                "description": "Tie breaking mode (ARRIVAL_ORDER, CLUSTER_LIST_LENGTH, ROUTER_ID)"
            }
        ]
    },
    "BGP_Peer_Configuration": {
        "description": "Returns configuration settings for BGP peerings. Reports configuration settings for each configured BGP peering on each node in the network. This question reports peer-specific settings. Settings that are process-wide are reported by the bgpProcessConfiguration question.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include nodes matching this name or regex.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "properties",
                "description": "Include properties matching this regex.",
                "type": "BgpPeerPropertySpec",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.bgpPeerConfiguration().answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node"
            },
            {
                "name": "VRF",
                "description": "VRF"
            },
            {
                "name": "Local_AS",
                "description": "Local AS number"
            },
            {
                "name": "Local_IP",
                "description": "Local IPv4 address (null for BGP unnumbered peers)"
            },
            {
                "name": "Local_Interface",
                "description": "Local Interface"
            },
            {
                "name": "Confederation",
                "description": "Confederation AS number"
            },
            {
                "name": "Remote_AS",
                "description": "Remote AS numbers with which this peer may establish a session"
            },
            {
                "name": "Remote_IP",
                "description": "Remote IP"
            },
            {
                "name": "Description",
                "description": "Configured peer description"
            },
            {
                "name": "Route_Reflector_Client",
                "description": "Whether this peer is a route reflector client"
            },
            {
                "name": "Cluster_ID",
                "description": "Cluster ID of this peer (null for peers that are not route reflector clients)"
            },
            {
                "name": "Peer_Group",
                "description": "Name of the BGP peer group to which this peer belongs"
            },
            {
                "name": "Import_Policy",
                "description": "Names of import policies to be applied to routes received by this peer"
            },
            {
                "name": "Export_Policy",
                "description": "Names of export policies to be applied to routes exported by this peer"
            },
            {
                "name": "Send_Community",
                "description": "Whether this peer propagates communities"
            },
            {
                "name": "Is_Passive",
                "description": "Whether this peer is passive"
            }
        ]
    },
    "Layer_3_Topology": {
        "description": "Returns Layer 3 links. Lists all Layer 3 edges in the network.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include edges whose first node matches this name or regex.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": ".*"
            },
            {
                "name": "remoteNodes",
                "description": "Include edges whose second node matches this name or regex.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": ".*"
            }
        ],
        "invocation": "result = bf.q.layer3Edges().answer().frame()",
        "return_value": [
            {
                "name": "Interface",
                "description": "Interface from which the edge originates"
            },
            {
                "name": "IPs",
                "description": "IPs"
            },
            {
                "name": "Remote_Interface",
                "description": "Interface at which the edge terminates"
            },
            {
                "name": "Remote_IPs",
                "description": "Remote IPs"
            }
        ]
    },
    "FilterLineReachability": {
        "description": "Returns unreachable lines in filters (ACLs and firewall rules). Finds all lines in the specified filters that will not match any packet, either because of being shadowed by prior lines or because of its match condition being empty.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Examine filters on nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "filters",
                "description": "Specifier for filters to test.",
                "type": "FilterSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "ignoreComposites",
                "description": "Whether to ignore filters that are composed of multiple filters defined in the configs.",
                "type": "bool",
                "optional": true,
                "default_value": false
            }
        ],
        "invocation": "result = bf.q.filterLineReachability().answer().frame()",
        "return_value": [
            {
                "name": "Sources",
                "description": "Filter sources",
                "type": "List of str"
            },
            {
                "name": "Unreachable_Line",
                "description": "Filter line that cannot be matched (i.e., unreachable)",
                "type": "str"
            },
            {
                "name": "Unreachable_Line_Action",
                "description": "Action performed by the unreachable line (e.g., PERMIT or DENY)",
                "type": "str"
            },
            {
                "name": "Blocking_Lines",
                "description": "Lines that, when combined, cover the unreachable line",
                "type": "List of str"
            },
            {
                "name": "Different_Action",
                "description": "Whether unreachable line has an action different from the blocking line(s)",
                "type": "bool"
            },
            {
                "name": "Reason",
                "description": "The reason a line is unreachable",
                "type": "str"
            },
            {
                "name": "Additional_Info",
                "description": "Additional information",
                "type": "str"
            }
        ]
    },
    "VLAN_Properties": {
        "description": "Returns configuration settings of switched VLANs. Lists information about implicitly and explicitly configured switched VLANs.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Include nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "interfaces",
                "description": "Include interfaces matching this specifier.",
                "type": "InterfaceSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "vlans",
                "description": "Include VLANs in this space.",
                "type": "str",
                "optional": true,
                "default_value": null
            },
            {
                "name": "excludeShutInterfaces",
                "description": "Exclude interfaces that are shutdown.",
                "type": "bool",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.switchedVlanProperties().answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node",
                "type": "str"
            },
            {
                "name": "VLAN_ID",
                "description": "VLAN_ID",
                "type": "int"
            },
            {
                "name": "Interfaces",
                "description": "Switched interfaces carrying traffic for this VLAN",
                "type": "Set of Interface"
            },
            {
                "name": "VXLAN_VNI",
                "description": "VXLAN VNI with which this VLAN is associated",
                "type": "int"
            }
        ]
    },
    "Search_Filters": {
        "description": "Finds flows for which a filter takes a particular behavior. This question searches for flows for which a filter (access control list) has a particular behavior. The behaviors can be: that the filter permits the flow (permit), that it denies the flow (deny), or that the flow is matched by a particular line (matchLine <lineNumber>). Filters are selected using node and filter specifiers, which might match multiple filters. In this case, a (possibly different) flow will be found for each filter.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Only evaluate filters present on nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "filters",
                "description": "Only evaluate filters that match this specifier.",
                "type": "FilterSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "headers",
                "description": "Packet header constraints on the flows being searched.",
                "type": "HeaderConstraints",
                "optional": true,
                "default_value": null
            },
            {
                "name": "action",
                "description": "The behavior that you want evaluated. Specify exactly one of permit, deny, or matchLine <line number>.",
                "type": "str",
                "optional": true,
                "default_value": null
            },
            {
                "name": "startLocation",
                "description": "Only consider specified locations as possible sources.",
                "type": "LocationSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "invertSearch",
                "description": "Search for packet headers outside the specified headerspace, rather than inside the space.",
                "type": "bool",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.searchFilters(headers=HeaderConstraints(srcIps='10.10.10.0/24', dstIps='218.8.104.58', applications = ['dns']), action='deny', filters='acl_in').answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node",
                "type": "str"
            },
            {
                "name": "Filter_Name",
                "description": "Filter name",
                "type": "str"
            },
            {
                "name": "Flow",
                "description": "Evaluated flow",
                "type": "Flow"
            },
            {
                "name": "Action",
                "description": "Outcome",
                "type": "str"
            },
            {
                "name": "Line_Content",
                "description": "Line content",
                "type": "str"
            },
            {
                "name": "Trace",
                "description": "ACL trace",
                "type": "List of TraceTree"
            }
        ]
    },
    "Test_Filters": {
        "description": "Returns how a flow is processed by a filter (ACLs, firewall rules). Shows how the specified flow is processed through the specified filters, returning its permit/deny status as well as the line(s) it matched.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Only examine filters on nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "filters",
                "description": "Only consider filters that match this specifier.",
                "type": "FilterSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "headers",
                "description": "Packet header constraints.",
                "type": "HeaderConstraints",
                "optional": false,
                "default_value": null
            },
            {
                "name": "startLocation",
                "description": "Location to start tracing from.",
                "type": "LocationSpec",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.testFilters(headers=HeaderConstraints(srcIps='10.10.10.1', dstIps='218.8.104.58', applications = ['dns']), nodes='rtr-with-acl', filters='acl_in').answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node",
                "type": "str"
            },
            {
                "name": "Filter_Name",
                "description": "Filter name",
                "type": "str"
            },
            {
                "name": "Flow",
                "description": "Evaluated flow",
                "type": "Flow"
            },
            {
                "name": "Action",
                "description": "Outcome",
                "type": "str"
            },
            {
                "name": "Line_Content",
                "description": "Line content",
                "type": "str"
            },
            {
                "name": "Trace",
                "description": "ACL trace",
                "type": "List of TraceTree"
            }
        ]
    },
    "Find_Matching_Filter_Lines": {
        "description": "Returns lines in filters (ACLs and firewall rules) that match any packet within the specified header constraints. Finds all lines in the specified filters that match any packet within the specified header constraints.",
        "inputs": [
            {
                "name": "nodes",
                "description": "Examine filters on nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "filters",
                "description": "Specifier for filters to check.",
                "type": "FilterSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "headers",
                "description": "Packet header constraints for which to find matching filter lines.",
                "type": "HeaderConstraints",
                "optional": true,
                "default_value": null
            },
            {
                "name": "action",
                "description": "Show filter lines with this action. By default returns lines with either action.",
                "type": "str",
                "optional": true,
                "default_value": null
            },
            {
                "name": "ignoreComposites",
                "description": "Whether to ignore filters that are composed of multiple filters defined in the configs.",
                "type": "bool",
                "optional": true,
                "default_value": false
            }
        ],
        "invocation": "result = bf.q.findMatchingFilterLines(headers=HeaderConstraints(applications='DNS')).answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Node",
                "type": "str"
            },
            {
                "name": "Filter",
                "description": "Filter name",
                "type": "str"
            },
            {
                "name": "Line",
                "description": "Line text",
                "type": "str"
            },
            {
                "name": "Line_Index",
                "description": "Index of line",
                "type": "int"
            },
            {
                "name": "Action",
                "description": "Action performed by the line (e.g., PERMIT or DENY)",
                "type": "str"
            }
        ]
    },
    "Check_SNMP_Community_Clients": {
        "description": "Checks if an SNMP community permits specified client IPs. This question checks if the specified SNMP community permits the specified client IPs on specified devices. It reports if any device does not have the community or the set of permitted client IPs by the community does not match those specified in the question. If the community exists and permits exactly the specified client IPs, the device is not included in the output. The question currently only supports Arista, Cisco-NXOS, and Juniper devices. For all others, it will report an UNSUPPORTED_DEVICE status in the output.",
        "inputs": [
            {
                "name": "community",
                "description": "The SNMP community to consider.",
                "type": "str",
                "optional": false,
                "default_value": null
            },
            {
                "name": "clients",
                "description": "Client IPs expected to be permitted.",
                "type": "IpSpec",
                "optional": true,
                "default_value": null
            },
            {
                "name": "nodes",
                "description": "Only evaluate nodes matching this specifier.",
                "type": "NodeSpec",
                "optional": true,
                "default_value": null
            }
        ],
        "invocation": "result = bf.q.snmpCommunityClients(community='COMM', clients='1.2.3.4/32').answer().frame()",
        "return_value": [
            {
                "name": "Node",
                "description": "Hostname.",
                "type": "str"
            },
            {
                "name": "Community",
                "description": "The community name.",
                "type": "str"
            },
            {
                "name": "Reason",
                "description": "Result of the test.",
                "type": "str"
            }
        ]
    }
}