# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import home_network_pb2 as home__network__pb2


class HomeNetworkStub(object):
    """Define the service for the home network.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartNetwork = channel.unary_unary(
                '/home_network.HomeNetwork/StartNetwork',
                request_serializer=home__network__pb2.Empty.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.StopNetwork = channel.unary_unary(
                '/home_network.HomeNetwork/StopNetwork',
                request_serializer=home__network__pb2.Empty.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.GetTopology = channel.unary_unary(
                '/home_network.HomeNetwork/GetTopology',
                request_serializer=home__network__pb2.Empty.SerializeToString,
                response_deserializer=home__network__pb2.Topology.FromString,
                )
        self.AddDevice = channel.unary_unary(
                '/home_network.HomeNetwork/AddDevice',
                request_serializer=home__network__pb2.Host.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.RemoveDevice = channel.unary_unary(
                '/home_network.HomeNetwork/RemoveDevice',
                request_serializer=home__network__pb2.Host.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.AddGroup = channel.unary_unary(
                '/home_network.HomeNetwork/AddGroup',
                request_serializer=home__network__pb2.Group.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.RemoveGroup = channel.unary_unary(
                '/home_network.HomeNetwork/RemoveGroup',
                request_serializer=home__network__pb2.Group.SerializeToString,
                response_deserializer=home__network__pb2.Empty.FromString,
                )
        self.GetGroups = channel.unary_unary(
                '/home_network.HomeNetwork/GetGroups',
                request_serializer=home__network__pb2.Empty.SerializeToString,
                response_deserializer=home__network__pb2.Groups.FromString,
                )
        self.GetBandwidth = channel.unary_unary(
                '/home_network.HomeNetwork/GetBandwidth',
                request_serializer=home__network__pb2.SrcDst.SerializeToString,
                response_deserializer=home__network__pb2.Bandwidth.FromString,
                )


class HomeNetworkServicer(object):
    """Define the service for the home network.
    """

    def StartNetwork(self, request, context):
        """Method to start the network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopNetwork(self, request, context):
        """Method to stop the network.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopology(self, request, context):
        """Method to get topology
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDevice(self, request, context):
        """Method to add a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDevice(self, request, context):
        """Method to remove a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGroup(self, request, context):
        """Method to add a group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveGroup(self, request, context):
        """Method to remove a group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroups(self, request, context):
        """Method to get list of all groups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBandwidth(self, request, context):
        """Method to get bandwidth between two nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HomeNetworkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.StartNetwork,
                    request_deserializer=home__network__pb2.Empty.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'StopNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.StopNetwork,
                    request_deserializer=home__network__pb2.Empty.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'GetTopology': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopology,
                    request_deserializer=home__network__pb2.Empty.FromString,
                    response_serializer=home__network__pb2.Topology.SerializeToString,
            ),
            'AddDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDevice,
                    request_deserializer=home__network__pb2.Host.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'RemoveDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDevice,
                    request_deserializer=home__network__pb2.Host.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'AddGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGroup,
                    request_deserializer=home__network__pb2.Group.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'RemoveGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveGroup,
                    request_deserializer=home__network__pb2.Group.FromString,
                    response_serializer=home__network__pb2.Empty.SerializeToString,
            ),
            'GetGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroups,
                    request_deserializer=home__network__pb2.Empty.FromString,
                    response_serializer=home__network__pb2.Groups.SerializeToString,
            ),
            'GetBandwidth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBandwidth,
                    request_deserializer=home__network__pb2.SrcDst.FromString,
                    response_serializer=home__network__pb2.Bandwidth.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'home_network.HomeNetwork', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HomeNetwork(object):
    """Define the service for the home network.
    """

    @staticmethod
    def StartNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/StartNetwork',
            home__network__pb2.Empty.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/StopNetwork',
            home__network__pb2.Empty.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/GetTopology',
            home__network__pb2.Empty.SerializeToString,
            home__network__pb2.Topology.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/AddDevice',
            home__network__pb2.Host.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/RemoveDevice',
            home__network__pb2.Host.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/AddGroup',
            home__network__pb2.Group.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/RemoveGroup',
            home__network__pb2.Group.SerializeToString,
            home__network__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/GetGroups',
            home__network__pb2.Empty.SerializeToString,
            home__network__pb2.Groups.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBandwidth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_network.HomeNetwork/GetBandwidth',
            home__network__pb2.SrcDst.SerializeToString,
            home__network__pb2.Bandwidth.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
